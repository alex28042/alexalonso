{"ast":null,"code":"const colorString = require('color-string');\n\nconst convert = require('color-convert');\n\nconst skippedModels = [// To be honest, I don't really feel like keyword belongs in color convert, but eh.\n'keyword', // Gray conflicts with some method names, and has its own method defined.\n'gray', // Shouldn't really be in color-convert either...\n'hex'];\nconst hashedModelKeys = {};\n\nfor (const model of Object.keys(convert)) {\n  hashedModelKeys[[...convert[model].labels].sort().join('')] = model;\n}\n\nconst limiters = {};\n\nfunction Color(object, model) {\n  if (!(this instanceof Color)) {\n    return new Color(object, model);\n  }\n\n  if (model && model in skippedModels) {\n    model = null;\n  }\n\n  if (model && !(model in convert)) {\n    throw new Error('Unknown model: ' + model);\n  }\n\n  let i;\n  let channels;\n\n  if (object == null) {\n    // eslint-disable-line no-eq-null,eqeqeq\n    this.model = 'rgb';\n    this.color = [0, 0, 0];\n    this.valpha = 1;\n  } else if (object instanceof Color) {\n    this.model = object.model;\n    this.color = [...object.color];\n    this.valpha = object.valpha;\n  } else if (typeof object === 'string') {\n    const result = colorString.get(object);\n\n    if (result === null) {\n      throw new Error('Unable to parse color from string: ' + object);\n    }\n\n    this.model = result.model;\n    channels = convert[this.model].channels;\n    this.color = result.value.slice(0, channels);\n    this.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;\n  } else if (object.length > 0) {\n    this.model = model || 'rgb';\n    channels = convert[this.model].channels;\n    const newArray = Array.prototype.slice.call(object, 0, channels);\n    this.color = zeroArray(newArray, channels);\n    this.valpha = typeof object[channels] === 'number' ? object[channels] : 1;\n  } else if (typeof object === 'number') {\n    // This is always RGB - can be converted later on.\n    this.model = 'rgb';\n    this.color = [object >> 16 & 0xFF, object >> 8 & 0xFF, object & 0xFF];\n    this.valpha = 1;\n  } else {\n    this.valpha = 1;\n    const keys = Object.keys(object);\n\n    if ('alpha' in object) {\n      keys.splice(keys.indexOf('alpha'), 1);\n      this.valpha = typeof object.alpha === 'number' ? object.alpha : 0;\n    }\n\n    const hashedKeys = keys.sort().join('');\n\n    if (!(hashedKeys in hashedModelKeys)) {\n      throw new Error('Unable to parse color from object: ' + JSON.stringify(object));\n    }\n\n    this.model = hashedModelKeys[hashedKeys];\n    const {\n      labels\n    } = convert[this.model];\n    const color = [];\n\n    for (i = 0; i < labels.length; i++) {\n      color.push(object[labels[i]]);\n    }\n\n    this.color = zeroArray(color);\n  } // Perform limitations (clamping, etc.)\n\n\n  if (limiters[this.model]) {\n    channels = convert[this.model].channels;\n\n    for (i = 0; i < channels; i++) {\n      const limit = limiters[this.model][i];\n\n      if (limit) {\n        this.color[i] = limit(this.color[i]);\n      }\n    }\n  }\n\n  this.valpha = Math.max(0, Math.min(1, this.valpha));\n\n  if (Object.freeze) {\n    Object.freeze(this);\n  }\n}\n\nColor.prototype = {\n  toString() {\n    return this.string();\n  },\n\n  toJSON() {\n    return this[this.model]();\n  },\n\n  string(places) {\n    let self = this.model in colorString.to ? this : this.rgb();\n    self = self.round(typeof places === 'number' ? places : 1);\n    const args = self.valpha === 1 ? self.color : [...self.color, this.valpha];\n    return colorString.to[self.model](args);\n  },\n\n  percentString(places) {\n    const self = this.rgb().round(typeof places === 'number' ? places : 1);\n    const args = self.valpha === 1 ? self.color : [...self.color, this.valpha];\n    return colorString.to.rgb.percent(args);\n  },\n\n  array() {\n    return this.valpha === 1 ? [...this.color] : [...this.color, this.valpha];\n  },\n\n  object() {\n    const result = {};\n    const {\n      channels\n    } = convert[this.model];\n    const {\n      labels\n    } = convert[this.model];\n\n    for (let i = 0; i < channels; i++) {\n      result[labels[i]] = this.color[i];\n    }\n\n    if (this.valpha !== 1) {\n      result.alpha = this.valpha;\n    }\n\n    return result;\n  },\n\n  unitArray() {\n    const rgb = this.rgb().color;\n    rgb[0] /= 255;\n    rgb[1] /= 255;\n    rgb[2] /= 255;\n\n    if (this.valpha !== 1) {\n      rgb.push(this.valpha);\n    }\n\n    return rgb;\n  },\n\n  unitObject() {\n    const rgb = this.rgb().object();\n    rgb.r /= 255;\n    rgb.g /= 255;\n    rgb.b /= 255;\n\n    if (this.valpha !== 1) {\n      rgb.alpha = this.valpha;\n    }\n\n    return rgb;\n  },\n\n  round(places) {\n    places = Math.max(places || 0, 0);\n    return new Color([...this.color.map(roundToPlace(places)), this.valpha], this.model);\n  },\n\n  alpha(value) {\n    if (value !== undefined) {\n      return new Color([...this.color, Math.max(0, Math.min(1, value))], this.model);\n    }\n\n    return this.valpha;\n  },\n\n  // Rgb\n  red: getset('rgb', 0, maxfn(255)),\n  green: getset('rgb', 1, maxfn(255)),\n  blue: getset('rgb', 2, maxfn(255)),\n  hue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, value => (value % 360 + 360) % 360),\n  saturationl: getset('hsl', 1, maxfn(100)),\n  lightness: getset('hsl', 2, maxfn(100)),\n  saturationv: getset('hsv', 1, maxfn(100)),\n  value: getset('hsv', 2, maxfn(100)),\n  chroma: getset('hcg', 1, maxfn(100)),\n  gray: getset('hcg', 2, maxfn(100)),\n  white: getset('hwb', 1, maxfn(100)),\n  wblack: getset('hwb', 2, maxfn(100)),\n  cyan: getset('cmyk', 0, maxfn(100)),\n  magenta: getset('cmyk', 1, maxfn(100)),\n  yellow: getset('cmyk', 2, maxfn(100)),\n  black: getset('cmyk', 3, maxfn(100)),\n  x: getset('xyz', 0, maxfn(95.047)),\n  y: getset('xyz', 1, maxfn(100)),\n  z: getset('xyz', 2, maxfn(108.833)),\n  l: getset('lab', 0, maxfn(100)),\n  a: getset('lab', 1),\n  b: getset('lab', 2),\n\n  keyword(value) {\n    if (value !== undefined) {\n      return new Color(value);\n    }\n\n    return convert[this.model].keyword(this.color);\n  },\n\n  hex(value) {\n    if (value !== undefined) {\n      return new Color(value);\n    }\n\n    return colorString.to.hex(this.rgb().round().color);\n  },\n\n  hexa(value) {\n    if (value !== undefined) {\n      return new Color(value);\n    }\n\n    const rgbArray = this.rgb().round().color;\n    let alphaHex = Math.round(this.valpha * 255).toString(16).toUpperCase();\n\n    if (alphaHex.length === 1) {\n      alphaHex = '0' + alphaHex;\n    }\n\n    return colorString.to.hex(rgbArray) + alphaHex;\n  },\n\n  rgbNumber() {\n    const rgb = this.rgb().color;\n    return (rgb[0] & 0xFF) << 16 | (rgb[1] & 0xFF) << 8 | rgb[2] & 0xFF;\n  },\n\n  luminosity() {\n    // http://www.w3.org/TR/WCAG20/#relativeluminancedef\n    const rgb = this.rgb().color;\n    const lum = [];\n\n    for (const [i, element] of rgb.entries()) {\n      const chan = element / 255;\n      lum[i] = chan <= 0.04045 ? chan / 12.92 : ((chan + 0.055) / 1.055) ** 2.4;\n    }\n\n    return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n  },\n\n  contrast(color2) {\n    // http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n    const lum1 = this.luminosity();\n    const lum2 = color2.luminosity();\n\n    if (lum1 > lum2) {\n      return (lum1 + 0.05) / (lum2 + 0.05);\n    }\n\n    return (lum2 + 0.05) / (lum1 + 0.05);\n  },\n\n  level(color2) {\n    // https://www.w3.org/TR/WCAG/#contrast-enhanced\n    const contrastRatio = this.contrast(color2);\n\n    if (contrastRatio >= 7) {\n      return 'AAA';\n    }\n\n    return contrastRatio >= 4.5 ? 'AA' : '';\n  },\n\n  isDark() {\n    // YIQ equation from http://24ways.org/2010/calculating-color-contrast\n    const rgb = this.rgb().color;\n    const yiq = (rgb[0] * 2126 + rgb[1] * 7152 + rgb[2] * 722) / 10000;\n    return yiq < 128;\n  },\n\n  isLight() {\n    return !this.isDark();\n  },\n\n  negate() {\n    const rgb = this.rgb();\n\n    for (let i = 0; i < 3; i++) {\n      rgb.color[i] = 255 - rgb.color[i];\n    }\n\n    return rgb;\n  },\n\n  lighten(ratio) {\n    const hsl = this.hsl();\n    hsl.color[2] += hsl.color[2] * ratio;\n    return hsl;\n  },\n\n  darken(ratio) {\n    const hsl = this.hsl();\n    hsl.color[2] -= hsl.color[2] * ratio;\n    return hsl;\n  },\n\n  saturate(ratio) {\n    const hsl = this.hsl();\n    hsl.color[1] += hsl.color[1] * ratio;\n    return hsl;\n  },\n\n  desaturate(ratio) {\n    const hsl = this.hsl();\n    hsl.color[1] -= hsl.color[1] * ratio;\n    return hsl;\n  },\n\n  whiten(ratio) {\n    const hwb = this.hwb();\n    hwb.color[1] += hwb.color[1] * ratio;\n    return hwb;\n  },\n\n  blacken(ratio) {\n    const hwb = this.hwb();\n    hwb.color[2] += hwb.color[2] * ratio;\n    return hwb;\n  },\n\n  grayscale() {\n    // http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\n    const rgb = this.rgb().color;\n    const value = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n    return Color.rgb(value, value, value);\n  },\n\n  fade(ratio) {\n    return this.alpha(this.valpha - this.valpha * ratio);\n  },\n\n  opaquer(ratio) {\n    return this.alpha(this.valpha + this.valpha * ratio);\n  },\n\n  rotate(degrees) {\n    const hsl = this.hsl();\n    let hue = hsl.color[0];\n    hue = (hue + degrees) % 360;\n    hue = hue < 0 ? 360 + hue : hue;\n    hsl.color[0] = hue;\n    return hsl;\n  },\n\n  mix(mixinColor, weight) {\n    // Ported from sass implementation in C\n    // https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209\n    if (!mixinColor || !mixinColor.rgb) {\n      throw new Error('Argument to \"mix\" was not a Color instance, but rather an instance of ' + typeof mixinColor);\n    }\n\n    const color1 = mixinColor.rgb();\n    const color2 = this.rgb();\n    const p = weight === undefined ? 0.5 : weight;\n    const w = 2 * p - 1;\n    const a = color1.alpha() - color2.alpha();\n    const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2;\n    const w2 = 1 - w1;\n    return Color.rgb(w1 * color1.red() + w2 * color2.red(), w1 * color1.green() + w2 * color2.green(), w1 * color1.blue() + w2 * color2.blue(), color1.alpha() * p + color2.alpha() * (1 - p));\n  }\n\n}; // Model conversion methods and static constructors\n\nfor (const model of Object.keys(convert)) {\n  if (skippedModels.includes(model)) {\n    continue;\n  }\n\n  const {\n    channels\n  } = convert[model]; // Conversion methods\n\n  Color.prototype[model] = function () {\n    if (this.model === model) {\n      return new Color(this);\n    }\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (args.length > 0) {\n      return new Color(args, model);\n    }\n\n    return new Color([...assertArray(convert[this.model][model].raw(this.color)), this.valpha], model);\n  }; // 'static' construction methods\n\n\n  Color[model] = function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    let color = args[0];\n\n    if (typeof color === 'number') {\n      color = zeroArray(args, channels);\n    }\n\n    return new Color(color, model);\n  };\n}\n\nfunction roundTo(number, places) {\n  return Number(number.toFixed(places));\n}\n\nfunction roundToPlace(places) {\n  return function (number) {\n    return roundTo(number, places);\n  };\n}\n\nfunction getset(model, channel, modifier) {\n  model = Array.isArray(model) ? model : [model];\n\n  for (const m of model) {\n    (limiters[m] || (limiters[m] = []))[channel] = modifier;\n  }\n\n  model = model[0];\n  return function (value) {\n    let result;\n\n    if (value !== undefined) {\n      if (modifier) {\n        value = modifier(value);\n      }\n\n      result = this[model]();\n      result.color[channel] = value;\n      return result;\n    }\n\n    result = this[model]().color[channel];\n\n    if (modifier) {\n      result = modifier(result);\n    }\n\n    return result;\n  };\n}\n\nfunction maxfn(max) {\n  return function (v) {\n    return Math.max(0, Math.min(max, v));\n  };\n}\n\nfunction assertArray(value) {\n  return Array.isArray(value) ? value : [value];\n}\n\nfunction zeroArray(array, length) {\n  for (let i = 0; i < length; i++) {\n    if (typeof array[i] !== 'number') {\n      array[i] = 0;\n    }\n  }\n\n  return array;\n}\n\nmodule.exports = Color;","map":{"version":3,"names":["colorString","require","convert","skippedModels","hashedModelKeys","model","Object","keys","labels","sort","join","limiters","Color","object","Error","i","channels","color","valpha","result","get","value","slice","length","newArray","Array","prototype","call","zeroArray","splice","indexOf","alpha","hashedKeys","JSON","stringify","push","limit","Math","max","min","freeze","toString","string","toJSON","places","self","to","rgb","round","args","percentString","percent","array","unitArray","unitObject","r","g","b","map","roundToPlace","undefined","red","getset","maxfn","green","blue","hue","saturationl","lightness","saturationv","chroma","gray","white","wblack","cyan","magenta","yellow","black","x","y","z","l","a","keyword","hex","hexa","rgbArray","alphaHex","toUpperCase","rgbNumber","luminosity","lum","element","entries","chan","contrast","color2","lum1","lum2","level","contrastRatio","isDark","yiq","isLight","negate","lighten","ratio","hsl","darken","saturate","desaturate","whiten","hwb","blacken","grayscale","fade","opaquer","rotate","degrees","mix","mixinColor","weight","color1","p","w","w1","w2","includes","assertArray","raw","roundTo","number","Number","toFixed","channel","modifier","isArray","m","v","module","exports"],"sources":["C:/Users/Michele Ungolo/Desktop/PortaFolio/alexalonso/node_modules/color/index.js"],"sourcesContent":["const colorString = require('color-string');\r\nconst convert = require('color-convert');\r\n\r\nconst skippedModels = [\r\n\t// To be honest, I don't really feel like keyword belongs in color convert, but eh.\r\n\t'keyword',\r\n\r\n\t// Gray conflicts with some method names, and has its own method defined.\r\n\t'gray',\r\n\r\n\t// Shouldn't really be in color-convert either...\r\n\t'hex',\r\n];\r\n\r\nconst hashedModelKeys = {};\r\nfor (const model of Object.keys(convert)) {\r\n\thashedModelKeys[[...convert[model].labels].sort().join('')] = model;\r\n}\r\n\r\nconst limiters = {};\r\n\r\nfunction Color(object, model) {\r\n\tif (!(this instanceof Color)) {\r\n\t\treturn new Color(object, model);\r\n\t}\r\n\r\n\tif (model && model in skippedModels) {\r\n\t\tmodel = null;\r\n\t}\r\n\r\n\tif (model && !(model in convert)) {\r\n\t\tthrow new Error('Unknown model: ' + model);\r\n\t}\r\n\r\n\tlet i;\r\n\tlet channels;\r\n\r\n\tif (object == null) { // eslint-disable-line no-eq-null,eqeqeq\r\n\t\tthis.model = 'rgb';\r\n\t\tthis.color = [0, 0, 0];\r\n\t\tthis.valpha = 1;\r\n\t} else if (object instanceof Color) {\r\n\t\tthis.model = object.model;\r\n\t\tthis.color = [...object.color];\r\n\t\tthis.valpha = object.valpha;\r\n\t} else if (typeof object === 'string') {\r\n\t\tconst result = colorString.get(object);\r\n\t\tif (result === null) {\r\n\t\t\tthrow new Error('Unable to parse color from string: ' + object);\r\n\t\t}\r\n\r\n\t\tthis.model = result.model;\r\n\t\tchannels = convert[this.model].channels;\r\n\t\tthis.color = result.value.slice(0, channels);\r\n\t\tthis.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;\r\n\t} else if (object.length > 0) {\r\n\t\tthis.model = model || 'rgb';\r\n\t\tchannels = convert[this.model].channels;\r\n\t\tconst newArray = Array.prototype.slice.call(object, 0, channels);\r\n\t\tthis.color = zeroArray(newArray, channels);\r\n\t\tthis.valpha = typeof object[channels] === 'number' ? object[channels] : 1;\r\n\t} else if (typeof object === 'number') {\r\n\t\t// This is always RGB - can be converted later on.\r\n\t\tthis.model = 'rgb';\r\n\t\tthis.color = [\r\n\t\t\t(object >> 16) & 0xFF,\r\n\t\t\t(object >> 8) & 0xFF,\r\n\t\t\tobject & 0xFF,\r\n\t\t];\r\n\t\tthis.valpha = 1;\r\n\t} else {\r\n\t\tthis.valpha = 1;\r\n\r\n\t\tconst keys = Object.keys(object);\r\n\t\tif ('alpha' in object) {\r\n\t\t\tkeys.splice(keys.indexOf('alpha'), 1);\r\n\t\t\tthis.valpha = typeof object.alpha === 'number' ? object.alpha : 0;\r\n\t\t}\r\n\r\n\t\tconst hashedKeys = keys.sort().join('');\r\n\t\tif (!(hashedKeys in hashedModelKeys)) {\r\n\t\t\tthrow new Error('Unable to parse color from object: ' + JSON.stringify(object));\r\n\t\t}\r\n\r\n\t\tthis.model = hashedModelKeys[hashedKeys];\r\n\r\n\t\tconst {labels} = convert[this.model];\r\n\t\tconst color = [];\r\n\t\tfor (i = 0; i < labels.length; i++) {\r\n\t\t\tcolor.push(object[labels[i]]);\r\n\t\t}\r\n\r\n\t\tthis.color = zeroArray(color);\r\n\t}\r\n\r\n\t// Perform limitations (clamping, etc.)\r\n\tif (limiters[this.model]) {\r\n\t\tchannels = convert[this.model].channels;\r\n\t\tfor (i = 0; i < channels; i++) {\r\n\t\t\tconst limit = limiters[this.model][i];\r\n\t\t\tif (limit) {\r\n\t\t\t\tthis.color[i] = limit(this.color[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tthis.valpha = Math.max(0, Math.min(1, this.valpha));\r\n\r\n\tif (Object.freeze) {\r\n\t\tObject.freeze(this);\r\n\t}\r\n}\r\n\r\nColor.prototype = {\r\n\ttoString() {\r\n\t\treturn this.string();\r\n\t},\r\n\r\n\ttoJSON() {\r\n\t\treturn this[this.model]();\r\n\t},\r\n\r\n\tstring(places) {\r\n\t\tlet self = this.model in colorString.to ? this : this.rgb();\r\n\t\tself = self.round(typeof places === 'number' ? places : 1);\r\n\t\tconst args = self.valpha === 1 ? self.color : [...self.color, this.valpha];\r\n\t\treturn colorString.to[self.model](args);\r\n\t},\r\n\r\n\tpercentString(places) {\r\n\t\tconst self = this.rgb().round(typeof places === 'number' ? places : 1);\r\n\t\tconst args = self.valpha === 1 ? self.color : [...self.color, this.valpha];\r\n\t\treturn colorString.to.rgb.percent(args);\r\n\t},\r\n\r\n\tarray() {\r\n\t\treturn this.valpha === 1 ? [...this.color] : [...this.color, this.valpha];\r\n\t},\r\n\r\n\tobject() {\r\n\t\tconst result = {};\r\n\t\tconst {channels} = convert[this.model];\r\n\t\tconst {labels} = convert[this.model];\r\n\r\n\t\tfor (let i = 0; i < channels; i++) {\r\n\t\t\tresult[labels[i]] = this.color[i];\r\n\t\t}\r\n\r\n\t\tif (this.valpha !== 1) {\r\n\t\t\tresult.alpha = this.valpha;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t},\r\n\r\n\tunitArray() {\r\n\t\tconst rgb = this.rgb().color;\r\n\t\trgb[0] /= 255;\r\n\t\trgb[1] /= 255;\r\n\t\trgb[2] /= 255;\r\n\r\n\t\tif (this.valpha !== 1) {\r\n\t\t\trgb.push(this.valpha);\r\n\t\t}\r\n\r\n\t\treturn rgb;\r\n\t},\r\n\r\n\tunitObject() {\r\n\t\tconst rgb = this.rgb().object();\r\n\t\trgb.r /= 255;\r\n\t\trgb.g /= 255;\r\n\t\trgb.b /= 255;\r\n\r\n\t\tif (this.valpha !== 1) {\r\n\t\t\trgb.alpha = this.valpha;\r\n\t\t}\r\n\r\n\t\treturn rgb;\r\n\t},\r\n\r\n\tround(places) {\r\n\t\tplaces = Math.max(places || 0, 0);\r\n\t\treturn new Color([...this.color.map(roundToPlace(places)), this.valpha], this.model);\r\n\t},\r\n\r\n\talpha(value) {\r\n\t\tif (value !== undefined) {\r\n\t\t\treturn new Color([...this.color, Math.max(0, Math.min(1, value))], this.model);\r\n\t\t}\r\n\r\n\t\treturn this.valpha;\r\n\t},\r\n\r\n\t// Rgb\r\n\tred: getset('rgb', 0, maxfn(255)),\r\n\tgreen: getset('rgb', 1, maxfn(255)),\r\n\tblue: getset('rgb', 2, maxfn(255)),\r\n\r\n\thue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, value => ((value % 360) + 360) % 360),\r\n\r\n\tsaturationl: getset('hsl', 1, maxfn(100)),\r\n\tlightness: getset('hsl', 2, maxfn(100)),\r\n\r\n\tsaturationv: getset('hsv', 1, maxfn(100)),\r\n\tvalue: getset('hsv', 2, maxfn(100)),\r\n\r\n\tchroma: getset('hcg', 1, maxfn(100)),\r\n\tgray: getset('hcg', 2, maxfn(100)),\r\n\r\n\twhite: getset('hwb', 1, maxfn(100)),\r\n\twblack: getset('hwb', 2, maxfn(100)),\r\n\r\n\tcyan: getset('cmyk', 0, maxfn(100)),\r\n\tmagenta: getset('cmyk', 1, maxfn(100)),\r\n\tyellow: getset('cmyk', 2, maxfn(100)),\r\n\tblack: getset('cmyk', 3, maxfn(100)),\r\n\r\n\tx: getset('xyz', 0, maxfn(95.047)),\r\n\ty: getset('xyz', 1, maxfn(100)),\r\n\tz: getset('xyz', 2, maxfn(108.833)),\r\n\r\n\tl: getset('lab', 0, maxfn(100)),\r\n\ta: getset('lab', 1),\r\n\tb: getset('lab', 2),\r\n\r\n\tkeyword(value) {\r\n\t\tif (value !== undefined) {\r\n\t\t\treturn new Color(value);\r\n\t\t}\r\n\r\n\t\treturn convert[this.model].keyword(this.color);\r\n\t},\r\n\r\n\thex(value) {\r\n\t\tif (value !== undefined) {\r\n\t\t\treturn new Color(value);\r\n\t\t}\r\n\r\n\t\treturn colorString.to.hex(this.rgb().round().color);\r\n\t},\r\n\r\n\thexa(value) {\r\n\t\tif (value !== undefined) {\r\n\t\t\treturn new Color(value);\r\n\t\t}\r\n\r\n\t\tconst rgbArray = this.rgb().round().color;\r\n\r\n\t\tlet alphaHex = Math.round(this.valpha * 255).toString(16).toUpperCase();\r\n\t\tif (alphaHex.length === 1) {\r\n\t\t\talphaHex = '0' + alphaHex;\r\n\t\t}\r\n\r\n\t\treturn colorString.to.hex(rgbArray) + alphaHex;\r\n\t},\r\n\r\n\trgbNumber() {\r\n\t\tconst rgb = this.rgb().color;\r\n\t\treturn ((rgb[0] & 0xFF) << 16) | ((rgb[1] & 0xFF) << 8) | (rgb[2] & 0xFF);\r\n\t},\r\n\r\n\tluminosity() {\r\n\t\t// http://www.w3.org/TR/WCAG20/#relativeluminancedef\r\n\t\tconst rgb = this.rgb().color;\r\n\r\n\t\tconst lum = [];\r\n\t\tfor (const [i, element] of rgb.entries()) {\r\n\t\t\tconst chan = element / 255;\r\n\t\t\tlum[i] = (chan <= 0.04045) ? chan / 12.92 : ((chan + 0.055) / 1.055) ** 2.4;\r\n\t\t}\r\n\r\n\t\treturn 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\r\n\t},\r\n\r\n\tcontrast(color2) {\r\n\t\t// http://www.w3.org/TR/WCAG20/#contrast-ratiodef\r\n\t\tconst lum1 = this.luminosity();\r\n\t\tconst lum2 = color2.luminosity();\r\n\r\n\t\tif (lum1 > lum2) {\r\n\t\t\treturn (lum1 + 0.05) / (lum2 + 0.05);\r\n\t\t}\r\n\r\n\t\treturn (lum2 + 0.05) / (lum1 + 0.05);\r\n\t},\r\n\r\n\tlevel(color2) {\r\n\t\t// https://www.w3.org/TR/WCAG/#contrast-enhanced\r\n\t\tconst contrastRatio = this.contrast(color2);\r\n\t\tif (contrastRatio >= 7) {\r\n\t\t\treturn 'AAA';\r\n\t\t}\r\n\r\n\t\treturn (contrastRatio >= 4.5) ? 'AA' : '';\r\n\t},\r\n\r\n\tisDark() {\r\n\t\t// YIQ equation from http://24ways.org/2010/calculating-color-contrast\r\n\t\tconst rgb = this.rgb().color;\r\n\t\tconst yiq = (rgb[0] * 2126 + rgb[1] * 7152 + rgb[2] * 722) / 10000;\r\n\t\treturn yiq < 128;\r\n\t},\r\n\r\n\tisLight() {\r\n\t\treturn !this.isDark();\r\n\t},\r\n\r\n\tnegate() {\r\n\t\tconst rgb = this.rgb();\r\n\t\tfor (let i = 0; i < 3; i++) {\r\n\t\t\trgb.color[i] = 255 - rgb.color[i];\r\n\t\t}\r\n\r\n\t\treturn rgb;\r\n\t},\r\n\r\n\tlighten(ratio) {\r\n\t\tconst hsl = this.hsl();\r\n\t\thsl.color[2] += hsl.color[2] * ratio;\r\n\t\treturn hsl;\r\n\t},\r\n\r\n\tdarken(ratio) {\r\n\t\tconst hsl = this.hsl();\r\n\t\thsl.color[2] -= hsl.color[2] * ratio;\r\n\t\treturn hsl;\r\n\t},\r\n\r\n\tsaturate(ratio) {\r\n\t\tconst hsl = this.hsl();\r\n\t\thsl.color[1] += hsl.color[1] * ratio;\r\n\t\treturn hsl;\r\n\t},\r\n\r\n\tdesaturate(ratio) {\r\n\t\tconst hsl = this.hsl();\r\n\t\thsl.color[1] -= hsl.color[1] * ratio;\r\n\t\treturn hsl;\r\n\t},\r\n\r\n\twhiten(ratio) {\r\n\t\tconst hwb = this.hwb();\r\n\t\thwb.color[1] += hwb.color[1] * ratio;\r\n\t\treturn hwb;\r\n\t},\r\n\r\n\tblacken(ratio) {\r\n\t\tconst hwb = this.hwb();\r\n\t\thwb.color[2] += hwb.color[2] * ratio;\r\n\t\treturn hwb;\r\n\t},\r\n\r\n\tgrayscale() {\r\n\t\t// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\r\n\t\tconst rgb = this.rgb().color;\r\n\t\tconst value = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\r\n\t\treturn Color.rgb(value, value, value);\r\n\t},\r\n\r\n\tfade(ratio) {\r\n\t\treturn this.alpha(this.valpha - (this.valpha * ratio));\r\n\t},\r\n\r\n\topaquer(ratio) {\r\n\t\treturn this.alpha(this.valpha + (this.valpha * ratio));\r\n\t},\r\n\r\n\trotate(degrees) {\r\n\t\tconst hsl = this.hsl();\r\n\t\tlet hue = hsl.color[0];\r\n\t\thue = (hue + degrees) % 360;\r\n\t\thue = hue < 0 ? 360 + hue : hue;\r\n\t\thsl.color[0] = hue;\r\n\t\treturn hsl;\r\n\t},\r\n\r\n\tmix(mixinColor, weight) {\r\n\t\t// Ported from sass implementation in C\r\n\t\t// https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209\r\n\t\tif (!mixinColor || !mixinColor.rgb) {\r\n\t\t\tthrow new Error('Argument to \"mix\" was not a Color instance, but rather an instance of ' + typeof mixinColor);\r\n\t\t}\r\n\r\n\t\tconst color1 = mixinColor.rgb();\r\n\t\tconst color2 = this.rgb();\r\n\t\tconst p = weight === undefined ? 0.5 : weight;\r\n\r\n\t\tconst w = 2 * p - 1;\r\n\t\tconst a = color1.alpha() - color2.alpha();\r\n\r\n\t\tconst w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2;\r\n\t\tconst w2 = 1 - w1;\r\n\r\n\t\treturn Color.rgb(\r\n\t\t\tw1 * color1.red() + w2 * color2.red(),\r\n\t\t\tw1 * color1.green() + w2 * color2.green(),\r\n\t\t\tw1 * color1.blue() + w2 * color2.blue(),\r\n\t\t\tcolor1.alpha() * p + color2.alpha() * (1 - p));\r\n\t},\r\n};\r\n\r\n// Model conversion methods and static constructors\r\nfor (const model of Object.keys(convert)) {\r\n\tif (skippedModels.includes(model)) {\r\n\t\tcontinue;\r\n\t}\r\n\r\n\tconst {channels} = convert[model];\r\n\r\n\t// Conversion methods\r\n\tColor.prototype[model] = function (...args) {\r\n\t\tif (this.model === model) {\r\n\t\t\treturn new Color(this);\r\n\t\t}\r\n\r\n\t\tif (args.length > 0) {\r\n\t\t\treturn new Color(args, model);\r\n\t\t}\r\n\r\n\t\treturn new Color([...assertArray(convert[this.model][model].raw(this.color)), this.valpha], model);\r\n\t};\r\n\r\n\t// 'static' construction methods\r\n\tColor[model] = function (...args) {\r\n\t\tlet color = args[0];\r\n\t\tif (typeof color === 'number') {\r\n\t\t\tcolor = zeroArray(args, channels);\r\n\t\t}\r\n\r\n\t\treturn new Color(color, model);\r\n\t};\r\n}\r\n\r\nfunction roundTo(number, places) {\r\n\treturn Number(number.toFixed(places));\r\n}\r\n\r\nfunction roundToPlace(places) {\r\n\treturn function (number) {\r\n\t\treturn roundTo(number, places);\r\n\t};\r\n}\r\n\r\nfunction getset(model, channel, modifier) {\r\n\tmodel = Array.isArray(model) ? model : [model];\r\n\r\n\tfor (const m of model) {\r\n\t\t(limiters[m] || (limiters[m] = []))[channel] = modifier;\r\n\t}\r\n\r\n\tmodel = model[0];\r\n\r\n\treturn function (value) {\r\n\t\tlet result;\r\n\r\n\t\tif (value !== undefined) {\r\n\t\t\tif (modifier) {\r\n\t\t\t\tvalue = modifier(value);\r\n\t\t\t}\r\n\r\n\t\t\tresult = this[model]();\r\n\t\t\tresult.color[channel] = value;\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tresult = this[model]().color[channel];\r\n\t\tif (modifier) {\r\n\t\t\tresult = modifier(result);\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t};\r\n}\r\n\r\nfunction maxfn(max) {\r\n\treturn function (v) {\r\n\t\treturn Math.max(0, Math.min(max, v));\r\n\t};\r\n}\r\n\r\nfunction assertArray(value) {\r\n\treturn Array.isArray(value) ? value : [value];\r\n}\r\n\r\nfunction zeroArray(array, length) {\r\n\tfor (let i = 0; i < length; i++) {\r\n\t\tif (typeof array[i] !== 'number') {\r\n\t\t\tarray[i] = 0;\r\n\t\t}\r\n\t}\r\n\r\n\treturn array;\r\n}\r\n\r\nmodule.exports = Color;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}