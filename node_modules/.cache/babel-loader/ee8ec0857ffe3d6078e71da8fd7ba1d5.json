{"ast":null,"code":"import { useRef } from 'react';\nimport { isNodeOrChild } from './utils/is-node-or-child.mjs';\nimport { usePointerEvent, addPointerEvent } from '../events/use-pointer-event.mjs';\nimport { useUnmountEffect } from '../utils/use-unmount-effect.mjs';\nimport { pipe } from 'popmotion';\nimport { AnimationType } from '../render/utils/types.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\n/**\r\n * @param handlers -\r\n * @internal\r\n */\n\nfunction useTapGesture(_ref) {\n  var onTap = _ref.onTap,\n      onTapStart = _ref.onTapStart,\n      onTapCancel = _ref.onTapCancel,\n      whileTap = _ref.whileTap,\n      visualElement = _ref.visualElement;\n  var hasPressListeners = onTap || onTapStart || onTapCancel || whileTap;\n  var isPressing = useRef(false);\n  var cancelPointerEndListeners = useRef(null);\n  /**\r\n   * Only set listener to passive if there are no external listeners.\r\n   */\n\n  var eventOptions = {\n    passive: !(onTapStart || onTap || onTapCancel || onPointerDown)\n  };\n\n  function removePointerEndListener() {\n    cancelPointerEndListeners.current && cancelPointerEndListeners.current();\n    cancelPointerEndListeners.current = null;\n  }\n\n  function checkPointerEnd() {\n    removePointerEndListener();\n    isPressing.current = false;\n    visualElement.animationState && visualElement.animationState.setActive(AnimationType.Tap, false);\n    return !isDragActive();\n  }\n\n  function onPointerUp(event, info) {\n    if (!checkPointerEnd()) return;\n    /**\r\n     * We only count this as a tap gesture if the event.target is the same\r\n     * as, or a child of, this component's element\r\n     */\n\n    !isNodeOrChild(visualElement.getInstance(), event.target) ? onTapCancel && onTapCancel(event, info) : onTap && onTap(event, info);\n  }\n\n  function onPointerCancel(event, info) {\n    if (!checkPointerEnd()) return;\n    onTapCancel && onTapCancel(event, info);\n  }\n\n  function onPointerDown(event, info) {\n    removePointerEndListener();\n    if (isPressing.current) return;\n    isPressing.current = true;\n    cancelPointerEndListeners.current = pipe(addPointerEvent(window, \"pointerup\", onPointerUp, eventOptions), addPointerEvent(window, \"pointercancel\", onPointerCancel, eventOptions));\n    /**\r\n     * Ensure we trigger animations before firing event callback\r\n     */\n\n    visualElement.animationState && visualElement.animationState.setActive(AnimationType.Tap, true);\n    onTapStart && onTapStart(event, info);\n  }\n\n  usePointerEvent(visualElement, \"pointerdown\", hasPressListeners ? onPointerDown : undefined, eventOptions);\n  useUnmountEffect(removePointerEndListener);\n}\n\nexport { useTapGesture };","map":{"version":3,"names":["useRef","isNodeOrChild","usePointerEvent","addPointerEvent","useUnmountEffect","pipe","AnimationType","isDragActive","useTapGesture","onTap","onTapStart","onTapCancel","whileTap","visualElement","hasPressListeners","isPressing","cancelPointerEndListeners","eventOptions","passive","onPointerDown","removePointerEndListener","current","checkPointerEnd","animationState","setActive","Tap","onPointerUp","event","info","getInstance","target","onPointerCancel","window","undefined"],"sources":["C:/Users/Michele Ungolo/Desktop/PortaFolio/alexalonso/node_modules/framer-motion/dist/es/gestures/use-tap-gesture.mjs"],"sourcesContent":["import { useRef } from 'react';\r\nimport { isNodeOrChild } from './utils/is-node-or-child.mjs';\r\nimport { usePointerEvent, addPointerEvent } from '../events/use-pointer-event.mjs';\r\nimport { useUnmountEffect } from '../utils/use-unmount-effect.mjs';\r\nimport { pipe } from 'popmotion';\r\nimport { AnimationType } from '../render/utils/types.mjs';\r\nimport { isDragActive } from './drag/utils/lock.mjs';\r\n\r\n/**\r\n * @param handlers -\r\n * @internal\r\n */\r\nfunction useTapGesture({ onTap, onTapStart, onTapCancel, whileTap, visualElement, }) {\r\n    const hasPressListeners = onTap || onTapStart || onTapCancel || whileTap;\r\n    const isPressing = useRef(false);\r\n    const cancelPointerEndListeners = useRef(null);\r\n    /**\r\n     * Only set listener to passive if there are no external listeners.\r\n     */\r\n    const eventOptions = {\r\n        passive: !(onTapStart || onTap || onTapCancel || onPointerDown),\r\n    };\r\n    function removePointerEndListener() {\r\n        cancelPointerEndListeners.current && cancelPointerEndListeners.current();\r\n        cancelPointerEndListeners.current = null;\r\n    }\r\n    function checkPointerEnd() {\r\n        removePointerEndListener();\r\n        isPressing.current = false;\r\n        visualElement.animationState &&\r\n            visualElement.animationState.setActive(AnimationType.Tap, false);\r\n        return !isDragActive();\r\n    }\r\n    function onPointerUp(event, info) {\r\n        if (!checkPointerEnd())\r\n            return;\r\n        /**\r\n         * We only count this as a tap gesture if the event.target is the same\r\n         * as, or a child of, this component's element\r\n         */\r\n        !isNodeOrChild(visualElement.getInstance(), event.target)\r\n            ? onTapCancel && onTapCancel(event, info)\r\n            : onTap && onTap(event, info);\r\n    }\r\n    function onPointerCancel(event, info) {\r\n        if (!checkPointerEnd())\r\n            return;\r\n        onTapCancel && onTapCancel(event, info);\r\n    }\r\n    function onPointerDown(event, info) {\r\n        removePointerEndListener();\r\n        if (isPressing.current)\r\n            return;\r\n        isPressing.current = true;\r\n        cancelPointerEndListeners.current = pipe(addPointerEvent(window, \"pointerup\", onPointerUp, eventOptions), addPointerEvent(window, \"pointercancel\", onPointerCancel, eventOptions));\r\n        /**\r\n         * Ensure we trigger animations before firing event callback\r\n         */\r\n        visualElement.animationState &&\r\n            visualElement.animationState.setActive(AnimationType.Tap, true);\r\n        onTapStart && onTapStart(event, info);\r\n    }\r\n    usePointerEvent(visualElement, \"pointerdown\", hasPressListeners ? onPointerDown : undefined, eventOptions);\r\n    useUnmountEffect(removePointerEndListener);\r\n}\r\n\r\nexport { useTapGesture };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}