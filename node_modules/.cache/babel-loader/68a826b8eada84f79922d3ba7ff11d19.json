{"ast":null,"code":"\"use strict\";\n\nvar cssesc = require(\"cssesc\");\n\nvar stringify;\n\nfunction escape(str, stringType) {\n  return cssesc(str, {\n    quotes: stringType === \"\\\"\" ? \"double\" : \"single\"\n  });\n}\n\nfunction stringifyWithoutBeforeAfter(tree) {\n  switch (tree.type) {\n    case \"values\":\n      return tree.nodes.map(stringify).join(\",\");\n\n    case \"value\":\n      return tree.nodes.map(stringify).join(\"\");\n\n    case \"item\":\n      return tree.name;\n\n    case \"nested-item\":\n      return tree.name + \"(\" + tree.nodes.map(stringify).join(\",\") + \")\";\n\n    case \"invalid\":\n      return tree.value;\n\n    case \"comment\":\n      return \"/*\" + tree.content + \"*/\";\n\n    case \"string\":\n      switch (tree.stringType) {\n        case \"'\":\n          return \"'\" + escape(tree.value, \"'\") + \"'\";\n\n        case \"\\\"\":\n          return \"\\\"\" + escape(tree.value, \"\\\"\") + \"\\\"\";\n      }\n      /* istanbul ignore next */\n\n\n      throw new Error(\"Invalid stringType\");\n\n    case \"url\":\n      var start = \"url(\" + (tree.innerSpacingBefore || \"\");\n      var end = (tree.innerSpacingAfter || \"\") + \")\";\n\n      switch (tree.stringType) {\n        case \"'\":\n          return start + \"'\" + tree.url.replace(/(\\\\)/g, \"\\\\$1\").replace(/'/g, \"\\\\'\") + \"'\" + end;\n\n        case \"\\\"\":\n          return start + \"\\\"\" + tree.url.replace(/(\\\\)/g, \"\\\\$1\").replace(/\"/g, \"\\\\\\\"\") + \"\\\"\" + end;\n\n        default:\n          return start + tree.url.replace(/(\"|'|\\)|\\\\)/g, \"\\\\$1\") + end;\n      }\n\n  }\n}\n\nstringify = function stringify(tree) {\n  var str = stringifyWithoutBeforeAfter(tree);\n\n  if (tree.before) {\n    str = tree.before + str;\n  }\n\n  if (tree.after) {\n    str = str + tree.after;\n  }\n\n  return str;\n};\n\nmodule.exports = stringify;","map":{"version":3,"names":["cssesc","require","stringify","escape","str","stringType","quotes","stringifyWithoutBeforeAfter","tree","type","nodes","map","join","name","value","content","Error","start","innerSpacingBefore","end","innerSpacingAfter","url","replace","before","after","module","exports"],"sources":["/home/alex/Escritorio/PortaFolio/alexalonso/node_modules/css-selector-tokenizer/lib/stringifyValues.js"],"sourcesContent":["\"use strict\";\n\nvar cssesc = require(\"cssesc\");\n\nvar stringify;\n\nfunction escape(str, stringType) {\n\treturn cssesc(str, {\n\t\tquotes: stringType === \"\\\"\" ? \"double\" : \"single\"\n\t});\n}\n\nfunction stringifyWithoutBeforeAfter(tree) {\n\tswitch(tree.type) {\n\tcase \"values\":\n\t\treturn tree.nodes.map(stringify).join(\",\");\n\tcase \"value\":\n\t\treturn tree.nodes.map(stringify).join(\"\");\n\tcase \"item\":\n\t\treturn tree.name;\n\tcase \"nested-item\":\n\t\treturn tree.name + \"(\" + tree.nodes.map(stringify).join(\",\") + \")\";\n\tcase \"invalid\":\n\t\treturn tree.value;\n\tcase \"comment\":\n\t\treturn \"/*\" + tree.content + \"*/\";\n\tcase \"string\":\n\t\tswitch(tree.stringType) {\n\t\tcase \"'\":\n\t\t\treturn \"'\" + escape(tree.value, \"'\") + \"'\";\n\t\tcase \"\\\"\":\n\t\t\treturn \"\\\"\" + escape(tree.value, \"\\\"\") + \"\\\"\";\n\t\t}\n\t\t/* istanbul ignore next */\n\t\tthrow new Error(\"Invalid stringType\");\n\tcase \"url\":\n\t\tvar start = \"url(\" + (tree.innerSpacingBefore || \"\");\n\t\tvar end = (tree.innerSpacingAfter || \"\") + \")\";\n\t\tswitch(tree.stringType) {\n\t\tcase \"'\":\n\t\t\treturn start + \"'\" + tree.url.replace(/(\\\\)/g, \"\\\\$1\").replace(/'/g, \"\\\\'\") + \"'\" + end;\n\t\tcase \"\\\"\":\n\t\t\treturn start + \"\\\"\" + tree.url.replace(/(\\\\)/g, \"\\\\$1\").replace(/\"/g, \"\\\\\\\"\") + \"\\\"\" + end;\n\t\tdefault:\n\t\t\treturn start + tree.url.replace(/(\"|'|\\)|\\\\)/g, \"\\\\$1\") + end;\n\t\t}\n\t}\n}\n\n\nstringify = function stringify(tree) {\n\tvar str = stringifyWithoutBeforeAfter(tree);\n\tif(tree.before) {\n\t\tstr = tree.before + str;\n\t}\n\tif(tree.after) {\n\t\tstr = str + tree.after;\n\t}\n\treturn str;\n};\n\nmodule.exports = stringify;\n"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AAEA,IAAIC,SAAJ;;AAEA,SAASC,MAAT,CAAgBC,GAAhB,EAAqBC,UAArB,EAAiC;EAChC,OAAOL,MAAM,CAACI,GAAD,EAAM;IAClBE,MAAM,EAAED,UAAU,KAAK,IAAf,GAAsB,QAAtB,GAAiC;EADvB,CAAN,CAAb;AAGA;;AAED,SAASE,2BAAT,CAAqCC,IAArC,EAA2C;EAC1C,QAAOA,IAAI,CAACC,IAAZ;IACA,KAAK,QAAL;MACC,OAAOD,IAAI,CAACE,KAAL,CAAWC,GAAX,CAAeT,SAAf,EAA0BU,IAA1B,CAA+B,GAA/B,CAAP;;IACD,KAAK,OAAL;MACC,OAAOJ,IAAI,CAACE,KAAL,CAAWC,GAAX,CAAeT,SAAf,EAA0BU,IAA1B,CAA+B,EAA/B,CAAP;;IACD,KAAK,MAAL;MACC,OAAOJ,IAAI,CAACK,IAAZ;;IACD,KAAK,aAAL;MACC,OAAOL,IAAI,CAACK,IAAL,GAAY,GAAZ,GAAkBL,IAAI,CAACE,KAAL,CAAWC,GAAX,CAAeT,SAAf,EAA0BU,IAA1B,CAA+B,GAA/B,CAAlB,GAAwD,GAA/D;;IACD,KAAK,SAAL;MACC,OAAOJ,IAAI,CAACM,KAAZ;;IACD,KAAK,SAAL;MACC,OAAO,OAAON,IAAI,CAACO,OAAZ,GAAsB,IAA7B;;IACD,KAAK,QAAL;MACC,QAAOP,IAAI,CAACH,UAAZ;QACA,KAAK,GAAL;UACC,OAAO,MAAMF,MAAM,CAACK,IAAI,CAACM,KAAN,EAAa,GAAb,CAAZ,GAAgC,GAAvC;;QACD,KAAK,IAAL;UACC,OAAO,OAAOX,MAAM,CAACK,IAAI,CAACM,KAAN,EAAa,IAAb,CAAb,GAAkC,IAAzC;MAJD;MAMA;;;MACA,MAAM,IAAIE,KAAJ,CAAU,oBAAV,CAAN;;IACD,KAAK,KAAL;MACC,IAAIC,KAAK,GAAG,UAAUT,IAAI,CAACU,kBAAL,IAA2B,EAArC,CAAZ;MACA,IAAIC,GAAG,GAAG,CAACX,IAAI,CAACY,iBAAL,IAA0B,EAA3B,IAAiC,GAA3C;;MACA,QAAOZ,IAAI,CAACH,UAAZ;QACA,KAAK,GAAL;UACC,OAAOY,KAAK,GAAG,GAAR,GAAcT,IAAI,CAACa,GAAL,CAASC,OAAT,CAAiB,OAAjB,EAA0B,MAA1B,EAAkCA,OAAlC,CAA0C,IAA1C,EAAgD,KAAhD,CAAd,GAAuE,GAAvE,GAA6EH,GAApF;;QACD,KAAK,IAAL;UACC,OAAOF,KAAK,GAAG,IAAR,GAAeT,IAAI,CAACa,GAAL,CAASC,OAAT,CAAiB,OAAjB,EAA0B,MAA1B,EAAkCA,OAAlC,CAA0C,IAA1C,EAAgD,MAAhD,CAAf,GAAyE,IAAzE,GAAgFH,GAAvF;;QACD;UACC,OAAOF,KAAK,GAAGT,IAAI,CAACa,GAAL,CAASC,OAAT,CAAiB,cAAjB,EAAiC,MAAjC,CAAR,GAAmDH,GAA1D;MAND;;EAzBD;AAkCA;;AAGDjB,SAAS,GAAG,SAASA,SAAT,CAAmBM,IAAnB,EAAyB;EACpC,IAAIJ,GAAG,GAAGG,2BAA2B,CAACC,IAAD,CAArC;;EACA,IAAGA,IAAI,CAACe,MAAR,EAAgB;IACfnB,GAAG,GAAGI,IAAI,CAACe,MAAL,GAAcnB,GAApB;EACA;;EACD,IAAGI,IAAI,CAACgB,KAAR,EAAe;IACdpB,GAAG,GAAGA,GAAG,GAAGI,IAAI,CAACgB,KAAjB;EACA;;EACD,OAAOpB,GAAP;AACA,CATD;;AAWAqB,MAAM,CAACC,OAAP,GAAiBxB,SAAjB"},"metadata":{},"sourceType":"script"}