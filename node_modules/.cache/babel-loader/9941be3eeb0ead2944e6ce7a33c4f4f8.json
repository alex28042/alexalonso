{"ast":null,"code":"import { useState } from 'react';\nimport { initPrefersReducedMotion } from './index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from './state.mjs';\n/**\r\n * A hook that returns `true` if we should be using reduced motion based on the current device's Reduced Motion setting.\r\n *\r\n * This can be used to implement changes to your UI based on Reduced Motion. For instance, replacing motion-sickness inducing\r\n * `x`/`y` animations with `opacity`, disabling the autoplay of background videos, or turning off parallax motion.\r\n *\r\n * It will actively respond to changes and re-render your components with the latest setting.\r\n *\r\n * ```jsx\r\n * export function Sidebar({ isOpen }) {\r\n *   const shouldReduceMotion = useReducedMotion()\r\n *   const closedX = shouldReduceMotion ? 0 : \"-100%\"\r\n *\r\n *   return (\r\n *     <motion.div animate={{\r\n *       opacity: isOpen ? 1 : 0,\r\n *       x: isOpen ? 0 : closedX\r\n *     }} />\r\n *   )\r\n * }\r\n * ```\r\n *\r\n * @return boolean\r\n *\r\n * @public\r\n */\n\nfunction useReducedMotion() {\n  /**\r\n   * Lazy initialisation of prefersReducedMotion\r\n   */\n  !hasReducedMotionListener.current && initPrefersReducedMotion();\n  const [shouldReduceMotion] = useState(prefersReducedMotion.current);\n  /**\r\n   * TODO See if people miss automatically updating shouldReduceMotion setting\r\n   */\n\n  return shouldReduceMotion;\n}\n\nexport { useReducedMotion };","map":{"version":3,"names":["useState","initPrefersReducedMotion","hasReducedMotionListener","prefersReducedMotion","useReducedMotion","current","shouldReduceMotion"],"sources":["C:/Users/Michele Ungolo/Desktop/PortaFolio/alexalonso/node_modules/framer-motion/dist/es/utils/reduced-motion/use-reduced-motion.mjs"],"sourcesContent":["import { useState } from 'react';\r\nimport { initPrefersReducedMotion } from './index.mjs';\r\nimport { hasReducedMotionListener, prefersReducedMotion } from './state.mjs';\r\n\r\n/**\r\n * A hook that returns `true` if we should be using reduced motion based on the current device's Reduced Motion setting.\r\n *\r\n * This can be used to implement changes to your UI based on Reduced Motion. For instance, replacing motion-sickness inducing\r\n * `x`/`y` animations with `opacity`, disabling the autoplay of background videos, or turning off parallax motion.\r\n *\r\n * It will actively respond to changes and re-render your components with the latest setting.\r\n *\r\n * ```jsx\r\n * export function Sidebar({ isOpen }) {\r\n *   const shouldReduceMotion = useReducedMotion()\r\n *   const closedX = shouldReduceMotion ? 0 : \"-100%\"\r\n *\r\n *   return (\r\n *     <motion.div animate={{\r\n *       opacity: isOpen ? 1 : 0,\r\n *       x: isOpen ? 0 : closedX\r\n *     }} />\r\n *   )\r\n * }\r\n * ```\r\n *\r\n * @return boolean\r\n *\r\n * @public\r\n */\r\nfunction useReducedMotion() {\r\n    /**\r\n     * Lazy initialisation of prefersReducedMotion\r\n     */\r\n    !hasReducedMotionListener.current && initPrefersReducedMotion();\r\n    const [shouldReduceMotion] = useState(prefersReducedMotion.current);\r\n    /**\r\n     * TODO See if people miss automatically updating shouldReduceMotion setting\r\n     */\r\n    return shouldReduceMotion;\r\n}\r\n\r\nexport { useReducedMotion };\r\n"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,wBAAT,QAAyC,aAAzC;AACA,SAASC,wBAAT,EAAmCC,oBAAnC,QAA+D,aAA/D;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,gBAAT,GAA4B;EACxB;AACJ;AACA;EACI,CAACF,wBAAwB,CAACG,OAA1B,IAAqCJ,wBAAwB,EAA7D;EACA,MAAM,CAACK,kBAAD,IAAuBN,QAAQ,CAACG,oBAAoB,CAACE,OAAtB,CAArC;EACA;AACJ;AACA;;EACI,OAAOC,kBAAP;AACH;;AAED,SAASF,gBAAT"},"metadata":{},"sourceType":"module"}