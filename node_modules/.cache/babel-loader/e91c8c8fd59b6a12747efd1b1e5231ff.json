{"ast":null,"code":"const Tokenizer = require('css-selector-tokenizer');\n\nconst {\n  parseAttrSelector,\n  attrStringify,\n  itMatchesOne\n} = require('./utils');\n\nfunction prefixNode(node, prefix) {\n  if (['class', 'id'].includes(node.type)) {\n    return { ...node,\n      name: `${prefix}${node.name}`\n    };\n  }\n\n  if (['attribute'].includes(node.type) && node.content) {\n    const {\n      type,\n      operator,\n      head,\n      classes,\n      foot\n    } = parseAttrSelector(node);\n    if (!['class', 'id'].includes(type)) return node;\n    return { ...node,\n      content: attrStringify({\n        type,\n        operator,\n        head,\n        classes: classes.map(cls => `${prefix}${cls}`),\n        foot\n      })\n    };\n  }\n\n  return node;\n}\n\nfunction iterateSelectorNodes(selector, options) {\n  const {\n    prefix,\n    ignore\n  } = options;\n  return { ...selector,\n    nodes: selector.nodes.map(node => {\n      if (['selector', 'nested-pseudo-class'].includes(node.type)) {\n        return iterateSelectorNodes(node, options);\n      }\n\n      if (itMatchesOne(ignore, Tokenizer.stringify(node))) return node;\n      return prefixNode(node, prefix);\n    })\n  };\n}\n/**\r\n * @type {import('postcss').PluginCreator}\r\n */\n\n\nmodule.exports = function () {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    prefix,\n    ignore\n  } = {\n    prefix: '',\n    ignore: [],\n    ...opts\n  };\n\n  if (typeof prefix !== 'string') {\n    throw new Error('@postcss-prefix: prefix option should be of type string.');\n  }\n\n  if (!Array.isArray(ignore)) {\n    throw new Error('@postcss-prefix: ignore options should be an Array.');\n  }\n\n  if (!prefix.length) return;\n  return {\n    postcssPlugin: 'postcss-prefixer',\n\n    Root(root, postcss) {\n      root.walkRules(rule => {\n        const parsed = Tokenizer.parse(rule.selector);\n        const selector = iterateSelectorNodes(parsed, {\n          prefix,\n          ignore\n        });\n        rule.selector = Tokenizer.stringify(selector);\n      });\n    }\n\n  };\n};\n\nmodule.exports.postcss = true;","map":{"version":3,"names":["Tokenizer","require","parseAttrSelector","attrStringify","itMatchesOne","prefixNode","node","prefix","includes","type","name","content","operator","head","classes","foot","map","cls","iterateSelectorNodes","selector","options","ignore","nodes","stringify","module","exports","opts","Error","Array","isArray","length","postcssPlugin","Root","root","postcss","walkRules","rule","parsed","parse"],"sources":["C:/Users/Michele Ungolo/Desktop/PortaFolio/alexalonso/node_modules/daisyui/src/lib/postcss-prefixer/index.js"],"sourcesContent":["const Tokenizer = require('css-selector-tokenizer');\r\nconst {\r\n  parseAttrSelector,\r\n  attrStringify,\r\n  itMatchesOne,\r\n} = require('./utils');\r\n\r\nfunction prefixNode(node, prefix) {\r\n  if (['class', 'id'].includes(node.type)) {\r\n    return {\r\n      ...node,\r\n      name: `${prefix}${node.name}`,\r\n    };\r\n  }\r\n\r\n  if (['attribute'].includes(node.type) && node.content) {\r\n    const {\r\n      type, operator, head, classes, foot,\r\n    } = parseAttrSelector(node);\r\n\r\n    if (!['class', 'id'].includes(type)) return node;\r\n\r\n    return {\r\n      ...node,\r\n      content: attrStringify({\r\n        type,\r\n        operator,\r\n        head,\r\n        classes: classes.map((cls) => `${prefix}${cls}`),\r\n        foot,\r\n      }),\r\n    }\r\n  }\r\n\r\n  return node;\r\n}\r\n\r\nfunction iterateSelectorNodes(selector, options) {\r\n  const { prefix, ignore } = options;\r\n  return {\r\n    ...selector,\r\n    nodes: selector.nodes.map((node) => {\r\n      if (['selector', 'nested-pseudo-class'].includes(node.type)) {\r\n        return iterateSelectorNodes(node, options);\r\n      }\r\n\r\n      if (itMatchesOne(ignore, Tokenizer.stringify(node))) return node;\r\n\r\n      return prefixNode(node, prefix);\r\n    }),\r\n  };\r\n}\r\n\r\n/**\r\n * @type {import('postcss').PluginCreator}\r\n */\r\nmodule.exports = (opts = {}) => {\r\n  const { prefix, ignore } = {\r\n    prefix: '',\r\n    ignore: [],\r\n    ...opts,\r\n  };\r\n\r\n  if (typeof prefix !== 'string') {\r\n    throw new Error('@postcss-prefix: prefix option should be of type string.');\r\n  }\r\n\r\n  if (!Array.isArray(ignore)) {\r\n    throw new Error('@postcss-prefix: ignore options should be an Array.');\r\n  }\r\n\r\n  if (!prefix.length) return;\r\n\r\n  return {\r\n    postcssPlugin: 'postcss-prefixer',\r\n    Root(root, postcss) {\r\n      root.walkRules((rule) => {\r\n        const parsed = Tokenizer.parse(rule.selector);\r\n        const selector = iterateSelectorNodes(parsed, { prefix, ignore });\r\n\r\n        rule.selector = Tokenizer.stringify(selector);\r\n      });\r\n    },\r\n  };\r\n}\r\n\r\nmodule.exports.postcss = true\r\n"],"mappings":"AAAA,MAAMA,SAAS,GAAGC,OAAO,CAAC,wBAAD,CAAzB;;AACA,MAAM;EACJC,iBADI;EAEJC,aAFI;EAGJC;AAHI,IAIFH,OAAO,CAAC,SAAD,CAJX;;AAMA,SAASI,UAAT,CAAoBC,IAApB,EAA0BC,MAA1B,EAAkC;EAChC,IAAI,CAAC,OAAD,EAAU,IAAV,EAAgBC,QAAhB,CAAyBF,IAAI,CAACG,IAA9B,CAAJ,EAAyC;IACvC,OAAO,EACL,GAAGH,IADE;MAELI,IAAI,EAAG,GAAEH,MAAO,GAAED,IAAI,CAACI,IAAK;IAFvB,CAAP;EAID;;EAED,IAAI,CAAC,WAAD,EAAcF,QAAd,CAAuBF,IAAI,CAACG,IAA5B,KAAqCH,IAAI,CAACK,OAA9C,EAAuD;IACrD,MAAM;MACJF,IADI;MACEG,QADF;MACYC,IADZ;MACkBC,OADlB;MAC2BC;IAD3B,IAEFb,iBAAiB,CAACI,IAAD,CAFrB;IAIA,IAAI,CAAC,CAAC,OAAD,EAAU,IAAV,EAAgBE,QAAhB,CAAyBC,IAAzB,CAAL,EAAqC,OAAOH,IAAP;IAErC,OAAO,EACL,GAAGA,IADE;MAELK,OAAO,EAAER,aAAa,CAAC;QACrBM,IADqB;QAErBG,QAFqB;QAGrBC,IAHqB;QAIrBC,OAAO,EAAEA,OAAO,CAACE,GAAR,CAAaC,GAAD,IAAU,GAAEV,MAAO,GAAEU,GAAI,EAArC,CAJY;QAKrBF;MALqB,CAAD;IAFjB,CAAP;EAUD;;EAED,OAAOT,IAAP;AACD;;AAED,SAASY,oBAAT,CAA8BC,QAA9B,EAAwCC,OAAxC,EAAiD;EAC/C,MAAM;IAAEb,MAAF;IAAUc;EAAV,IAAqBD,OAA3B;EACA,OAAO,EACL,GAAGD,QADE;IAELG,KAAK,EAAEH,QAAQ,CAACG,KAAT,CAAeN,GAAf,CAAoBV,IAAD,IAAU;MAClC,IAAI,CAAC,UAAD,EAAa,qBAAb,EAAoCE,QAApC,CAA6CF,IAAI,CAACG,IAAlD,CAAJ,EAA6D;QAC3D,OAAOS,oBAAoB,CAACZ,IAAD,EAAOc,OAAP,CAA3B;MACD;;MAED,IAAIhB,YAAY,CAACiB,MAAD,EAASrB,SAAS,CAACuB,SAAV,CAAoBjB,IAApB,CAAT,CAAhB,EAAqD,OAAOA,IAAP;MAErD,OAAOD,UAAU,CAACC,IAAD,EAAOC,MAAP,CAAjB;IACD,CARM;EAFF,CAAP;AAYD;AAED;AACA;AACA;;;AACAiB,MAAM,CAACC,OAAP,GAAiB,YAAe;EAAA,IAAdC,IAAc,uEAAP,EAAO;EAC9B,MAAM;IAAEnB,MAAF;IAAUc;EAAV,IAAqB;IACzBd,MAAM,EAAE,EADiB;IAEzBc,MAAM,EAAE,EAFiB;IAGzB,GAAGK;EAHsB,CAA3B;;EAMA,IAAI,OAAOnB,MAAP,KAAkB,QAAtB,EAAgC;IAC9B,MAAM,IAAIoB,KAAJ,CAAU,0DAAV,CAAN;EACD;;EAED,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcR,MAAd,CAAL,EAA4B;IAC1B,MAAM,IAAIM,KAAJ,CAAU,qDAAV,CAAN;EACD;;EAED,IAAI,CAACpB,MAAM,CAACuB,MAAZ,EAAoB;EAEpB,OAAO;IACLC,aAAa,EAAE,kBADV;;IAELC,IAAI,CAACC,IAAD,EAAOC,OAAP,EAAgB;MAClBD,IAAI,CAACE,SAAL,CAAgBC,IAAD,IAAU;QACvB,MAAMC,MAAM,GAAGrC,SAAS,CAACsC,KAAV,CAAgBF,IAAI,CAACjB,QAArB,CAAf;QACA,MAAMA,QAAQ,GAAGD,oBAAoB,CAACmB,MAAD,EAAS;UAAE9B,MAAF;UAAUc;QAAV,CAAT,CAArC;QAEAe,IAAI,CAACjB,QAAL,GAAgBnB,SAAS,CAACuB,SAAV,CAAoBJ,QAApB,CAAhB;MACD,CALD;IAMD;;EATI,CAAP;AAWD,CA5BD;;AA8BAK,MAAM,CAACC,OAAP,CAAeS,OAAf,GAAyB,IAAzB"},"metadata":{},"sourceType":"script"}